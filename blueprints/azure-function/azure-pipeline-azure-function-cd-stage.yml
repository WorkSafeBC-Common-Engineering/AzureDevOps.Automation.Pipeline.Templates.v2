parameters:
- name:     name
  type:     string
- name:     displayName
  type:     string
- name:     config
  type:     object
  default:  []
- name:     dependsOn
  type:     object
  default:  []
- name:     azFuncProjectName
  type:     string
- name:     azureFunctionType
  type:     string
- name:     functionExtensionVersion
  type:     string
- name:     windowsRuntimeStack
  type:     string
- name:     linuxRuntimeStack
  type:     string

stages:

# -----------------------------------------------------------------------------------------------------
# STAGE
# -----------------------------------------------------------------------------------------------------

- stage:         ${{parameters.name}}
  displayName:   ${{parameters.displayName}}
  ${{ if ne(length(parameters.dependsOn), 0) }}:
    dependsOn:
      - ${{ each stage in parameters.dependsOn }}:
        - ${{stage}}
  pool:
    vmImage:     ${{parameters.config.nameVM}}
  jobs:
  - deployment:  ${{parameters.name}}
    environment: ${{parameters.config.nameEnv}}
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureFunctionApp@2
            displayName: Deploy Azure Function
            inputs:
              azureSubscription: ${{parameters.config.azureSubscription}}
              appType: ${{parameters.azureFunctionType}}
              appName: ${{parameters.config.azureAppName}}
              package: '$(Pipeline.Workspace)/**/${{parameters.azFuncProjectName}}.zip'
              runtimeStack: ${{parameters.linuxRuntimeStack}}

          - task: AzureCLI@2
            displayName: Set Azure Function Runtime
            inputs:
              azureSubscription: ${{parameters.config.azureSubscription}}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config appsettings set --settings FUNCTIONS_EXTENSION_VERSION=${{parameters.functionExtensionVersion}} -g ${{parameters.config.azureResourceGroup}} -n ${{parameters.config.azureAppName}}

          - task: AzureCLI@2
            displayName: Set Azure Function .Net Version - Windows
            condition: eq( '${{ parameters.azureFunctionType }}', 'functionApp')
            inputs:
              azureSubscription: ${{parameters.config.azureSubscription}}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config set --net-framework-version ${{parameters.windowsRuntimeStack}} -g ${{parameters.config.azureResourceGroup}} -n ${{parameters.config.azureAppName}}

          - task: AzureCLI@2
            displayName: Set Azure Function .Net Version - Linux
            condition: eq('${{ parameters.azureFunctionType }}', 'functionAppLinux')
            inputs:
              azureSubscription: ${{parameters.config.azureSubscription}}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az functionapp config set --name ${{parameters.config.azureAppName}} --resource-group ${{parameters.config.azureResourceGroup}} --linux-fx-version "${{parameters.linuxRuntimeStack}}"
