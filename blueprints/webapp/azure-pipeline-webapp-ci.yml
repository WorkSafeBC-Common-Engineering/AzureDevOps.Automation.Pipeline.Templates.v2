parameters:
- name:     blueprintVersion
  type:     string
- name:     portfolioName
  type:     string
- name:     productName
  type:     string
- name:     applicationBlueprint
  type:     string
- name:     netCoreVersion
  type:     string
- name:     publishFolder
  type:     string
- name:     solutionFile
  type:     string
  default:  '*.sln'
# Bootstrap optionals
- name:     verbose
  type:     boolean
  default:  false
# CI Blueprint optionals
- name:     versionSpec
  type:     string
# CD Blueprint optionals
- name:     modeElite
  type:     boolean
  default:  false
# Is application dotnet core or dotnet  
- name:     isDotNetCore
  type:     boolean  
  default:  true

# --------------------------------------------------------------------------
# START OF BUILD and TEST STAGE
# --------------------------------------------------------------------------
stages:
- stage: ContinuousIntegration
  displayName: Continuous Integration (CI)

  # Configure the default agent pool and image to use for the pipeline
  pool:
    name:     'Azure Pipelines'
    vmImage:  'Windows-latest'
  
  # Variables
  variables:
    buildConfiguration:   'Release'

  jobs:
  - job: ContinuousIntegration
    steps:
    - checkout: self
      fetchDepth: 0
    - template: /templates/utilities/git-tools-git-version.yml@CeBlueprints
      parameters:
        portfolioName:    ${{parameters.portfolioName}}
        productName:      ${{parameters.productName}}
        versionSpec:      ${{parameters.versionSpec}}

# --------------------------------------------------------------------------
# PREREQUISITES
# --------------------------------------------------------------------------
    - task: UseDotNet@2 
      displayName:      'Use .NET Core ${{parameters.netCoreVersion}}'
      inputs:
        version:        ${{parameters.netCoreVersion}}
        packageType:    sdk

# ==========================================================================
# BOOTSTRAP VALIDATION
# ==========================================================================
    - template: /templates/boot-strap.yml@CeBlueprints
      parameters:
        blueprintVersion:     ${{parameters.blueprintVersion}}
        bootstrapMode:        'init'
        applicationType:      'dotnet'
        applicationBlueprint: ${{parameters.applicationBlueprint}}
        portfolioName:        ${{parameters.portfolioName}}
        productName:          ${{parameters.productName}}
        sourcesDirectory:     $(Build.SourcesDirectory)
        verbose:              ${{parameters.verbose}}
        modeElite:            ${{parameters.modeElite}}
# ==========================================================================
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          $dotnetVersion = "${{parameters.netCoreVersion}}"
          $dotnetMajorVersion = $dotnetVersion.Split('.')[0]
          Write-Host "dotnet major version $dotnetMajorVersion"
          if ([int]$dotnetMajorVersion -ge 6) {
              Write-Host "##vso[task.setvariable variable=is6OrLater]true"
          } else {
              Write-Host "##vso[task.setvariable variable=is6OrLater]false"
          }
      displayName: 'Identify .NET Version' 

    - task: PowerShell@2
      condition: and(succeeded(), eq('${{parameters.isDotNetCore}}', 'true'), eq(variables['is6OrLater'], 'true'))
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          $slnPath = Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse -Filter ${{parameters.solutionFile}} | Select-Object -First 1
          Write-Host "##vso[task.setvariable variable=fullFilePath]$($slnPath.FullName)"
      displayName: 'Find solution file path'

    - task: DotNetCoreCLI@2
      condition: and(succeeded(), eq('${{parameters.isDotNetCore}}', 'true'), eq(variables['is6OrLater'], 'true'))
      displayName: Restore Workload
      inputs:
        command:    'custom'
        custom:     'workload'
        arguments:  'restore $(fullFilePath)'
    
    - ${{ if and(eq(parameters.isDotNetCore, true), ne(variables['Build.SourceBranch'], 'refs/heads/release'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) }}:
      - task: DotNetCoreCLI@2
        displayName: Restore - Lower Environments
        env:
          Telerik-NuGet-Key: $(Telerik-NuGet-Key)
        inputs:
          command:    restore
          projects:   '**/${{parameters.publishFolder}}/**/*.csproj'
          feedsToUse:      'config'
          nugetConfigPath: '$(Build.SourcesDirectory)/AzureDevOps.Automation.Pipeline.Toolbox.v2/toolbox/config/nuget/nuget-lo-env.config'

    - ${{ if and(eq(parameters.isDotNetCore, true),  or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) }}:
      - task: DotNetCoreCLI@2
        displayName: Restore - Higher Environments
        env:
          Telerik-NuGet-Key: $(Telerik-NuGet-Key)
        inputs:
          command:    restore
          projects:   '**/${{parameters.publishFolder}}/**/*.??proj'
          feedsToUse:      'config'
          nugetConfigPath: '$(Build.SourcesDirectory)/AzureDevOps.Automation.Pipeline.Toolbox.v2/toolbox/config/nuget/nuget.config'

# --------------------------------------------------------------------------
# CONTINUOUS INTEGRATION BUILD
# --------------------------------------------------------------------------
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command:          'build'
        projects:         '$(Build.SourcesDirectory)/**/${{parameters.publishFolder}}/**/${{parameters.solutionFile}}'
        arguments:        "--configuration $(buildConfiguration) --no-restore /p:Version=$(setSemVersion.semVersion)"

# --------------------------------------------------------------------------
# CONTINUOUS INTEGRATION: TEST
# -- All the test projects should be placed inside 
#    the respective folders e.g. src/Tests/UnitTests etc.
# --------------------------------------------------------------------------
    - template: /templates/qa/tests/tests-ci-all.yml@CeBlueprints
      parameters:
        isDotNetCore:       ${{parameters.isDotNetCore}}
        modeElite:            ${{parameters.modeElite}}

# --------------------------------------------------------------------------
# PUBLISH
# --------------------------------------------------------------------------
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command:           'publish'
        publishWebProjects: false
        projects:           '$(Build.SourcesDirectory)/**/${{parameters.publishFolder}}/**/${{parameters.solutionFile}}'
        arguments:          '-o $(Build.ArtifactStagingDirectory) -c $(buildConfiguration) -v diag'
        zipAfterPublish:    true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish:  "$(Build.ArtifactStagingDirectory)"
        ArtifactName:   'drop'

# ==========================================================================
# BOOTSTRAP VALIDATION
# ==========================================================================
    - template: /templates/boot-strap.yml@CeBlueprints
      parameters:
        blueprintVersion:     ${{parameters.blueprintVersion}}
        bootstrapMode:        'run'
        applicationType:      'dotnet'
        applicationBlueprint: ${{parameters.applicationBlueprint}}
        portfolioName:        ${{parameters.portfolioName}}
        productName:          ${{parameters.productName}}
        sourcesDirectory:     $(Build.SourcesDirectory)
        verbose:              ${{parameters.verbose}}
        modeElite:            ${{parameters.modeElite}}
# ==========================================================================
      
# --------------------------------------------------------------------------
# END BUILD AND TEST STAGE
# --------------------------------------------------------------------------

    - ${{ if eq(lower(variables['Build.SourceBranchName']), 'merge') }}:
      - script: echo CD part of the pipeline is suppressed for pull request validation builds! 
        displayName: PR Validation CD Suppression Alert