# --------------------------------------------------------------------------
# See https://aka.ms/yaml for Azure DevOps Pipeline documentation
#
# BOOTSTRAP
# Heart of our pipelines, helping us bootstrap the right templates
#---------------------------------------------------------------------------
# MODES
#   init                  Runs initialisation steps
#   foundation            Loads keyvault and toolbox
#   run                   Runs validation steps
#   rundevsecopsonly      Runs only DevSecOps validation steps
#   runbuildingcodeonly   Runs only Building Code validation steps
#---------------------------------------------------------------------------

parameters:
# Do NOT modify this baseline version. Use a higher version in the -start.yml template for newer features.
- name:     blueprintVersion
  type:     string
  default:  2.0.0
- name:     bootstrapMode
  type:     string
  default:  'invalid'
- name:     portfolioName
  type:     string
  default:  'unknown'
- name:     productName
  type:     string
  default:  'unknown'
- name:     applicationBlueprint
  type:     string
  default:  'generic'
- name:     applicationGuid # not used - reverse compatibility
  type:     string
  default:  'invalid'
- name:     applicationType
  type:     string
  default:  'unknown'
- name:     sourcesDirectory
  type:     string
  default:  '$(Build.SourcesDirectory)'
- name:     verbose
  type:     boolean
  default:  false
- name:     forceCheck
  type:     boolean
  default:  false
- name:     modeElite
  type:     boolean
  default:  true
- name:     runAzurite
  type:     boolean
  default:  false

steps:
# ===========================================================================
# BOOTSTRAP VERBOSE
# ===========================================================================
- ${{ if eq( parameters.verbose, true ) }}: 
  - script: echo boot-strap template >> BM=${{parameters.bootstrapMode}}, PO=${{parameters.portfolioName}}, PR=${{parameters.productName}}, AB=${{parameters.applicationBlueprint}}, AT=${{parameters.applicationType}}, AB=${{parameters.applicationBlueprint}}, FC=${{parameters.forceCheck}}, ME=${{parameters.modeElite}}
    displayName: Bootstrap Verbose Logging

# ===========================================================================
# VALIDATE PORTFOLIO NAME
# ===========================================================================
- ${{ if or(eq( lower(parameters.bootstrapMode), 'init' ), eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' )) }}:
  - template:    utilities/validate-portfolio.yml@CeBlueprints
    parameters:
      portfolioName: ${{parameters.portfolioName}}

- ${{ if or(eq( lower(parameters.bootstrapMode), 'init' ), eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' )) }}:
  - template:    utilities/info-version.yml@CeBlueprints
    parameters:
      blueprintVersion:     ${{parameters.blueprintVersion}}
      modeElite:            ${{parameters.modeElite}}
      applicationBlueprint: ${{parameters.applicationBlueprint}}
      applicationType:      ${{parameters.applicationType}}

- ${{ if eq( parameters.verbose, true ) }}: 
  - bash: 'env | sort'
    displayName: Bootstrap Dump env variables

# ===========================================================================
# BOOTSTRAP KEY VAULT
# LOADS:
# - __TODO_LIST_YOUR_SECRET_VARIABLES_THAT_WILL_BE_LOADED_HERE
# ===========================================================================
- ${{ if or(eq( lower(parameters.bootstrapMode), 'init' ), eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' )) }}:
  - task: AzureKeyVault@2
    displayName: Bootstrap Key Vault
    inputs:
      azureSubscription: 'CeS Bootstrap Service Endpoint'
      KeyVaultName:      '__TODO__INSERT_VAULT_NAME__'
      RunAsPreJob:       true

# ===========================================================================
# BOOTSTRAP TOOLBOX
# ===========================================================================
# For Building code only checkout self first to force same sequence
- ${{ if eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' ) }}:
  - checkout:    self
    fetchDepth:  0
# Production Toolbox
- ${{ if or( eq( lower(parameters.bootstrapMode), 'init' ), eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' )) }}:
  - checkout: git://Common-Engineering-System/AzureDevOps.Automation.Pipeline.Toolbox.v2
  
# ===========================================================================
# BOOTSTRAP INITIALISATION STAGE
# ===========================================================================
- ${{ if eq( lower(parameters.bootstrapMode), 'init' ) }}:
  - template: dev-sec-ops/security-scans-init-ci.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      cliSources:             ${{parameters.sourcesDirectory}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# ===========================================================================
# BOOTSTRAP - OPTIONAL START - AZURITE (Azure Storage Emulator)
# ===========================================================================
- ${{ if and( eq( lower( parameters.bootstrapMode ), 'init' ), eq( parameters.runAzurite, true )) }}:
  - template: emulators/azurite.yml@CeBlueprints

# ===========================================================================
# BOOTSTRAP RUN STAGE
# ===========================================================================

# -----------------------------------------------------------------------
# DevSecOps Only
# -----------------------------------------------------------------------
- ${{ if eq( lower(parameters.bootstrapMode), 'rundevsecopsonly' ) }}:
  - template: dev-sec-ops/security-scans-ci.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      cliSources:             ${{parameters.sourcesDirectory}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# -----------------------------------------------------------------------
# Building Code Only
# -----------------------------------------------------------------------

# By default we do NOT run the building code if we are within the context of a pull request
- ${{ if and(eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' ), and(eq(lower(variables['Build.SourceBranchName']), 'merge'), eq( parameters.forceCheck, false))) }}:
  - script:      echo Building Code Validations are suppressed by default to optimize pull request builds.  Set parameters.forceCheck = true to force the building code to run in the pull request.
    displayName: Bootstrap Building Code Validation Suppression Alert

# User can force the building code to run within the context of a pull request
- ${{ if and(eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' ), and(eq(lower(variables['Build.SourceBranchName']), 'merge'), eq( parameters.forceCheck, true))) }}:
  - template:    building-code/building-code.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      applicationBlueprint:   ${{parameters.applicationBlueprint}}
      blueprintVersion:       ${{parameters.blueprintVersion}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# If we are not within the context of a pull request (brach <> merge) then we run the building code
- ${{ if and(eq( lower(parameters.bootstrapMode), 'runbuildingcodeonly' ), ne(lower(variables['Build.SourceBranchName']), 'merge')) }}:
  - template:    building-code/building-code.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      applicationBlueprint:   ${{parameters.applicationBlueprint}}
      blueprintVersion:       ${{parameters.blueprintVersion}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# -----------------------------------------------------------------------
# Building Code and DevSecOps
# -----------------------------------------------------------------------
- ${{ if eq( lower(parameters.bootstrapMode), 'run' ) }}:
  - template:    dev-sec-ops/security-scans-ci.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      cliSources:             ${{parameters.sourcesDirectory}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# By default we do NOT run the building code if we are within the context of a pull request
- ${{ if and(eq( lower(parameters.bootstrapMode), 'run' ), and(eq(lower(variables['Build.SourceBranchName']), 'merge'), eq( parameters.forceCheck, false))) }}:
  - script:      echo Building Code Validations are suppressed by default to optimize pull request builds. Set parameters.forceCheck = true to force the building code to run in the pull request.
    displayName: Bootstrap Building Code Validation Suppression Alert
    
# User can force the building code to run within the context of a pull request
- ${{ if and(eq( lower(parameters.bootstrapMode), 'run' ), and(eq(lower(variables['Build.SourceBranchName']), 'merge'), eq( parameters.forceCheck, true))) }}:
  - template:    building-code/building-code.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      cliSources:             ${{parameters.sourcesDirectory}}
      applicationBlueprint:   ${{parameters.applicationBlueprint}}
      blueprintVersion:       ${{parameters.blueprintVersion}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}

# If we are not within the context of a pull request (brach <> merge) then we run the building code
- ${{ if and(eq( lower(parameters.bootstrapMode), 'run' ), ne(lower(variables['Build.SourceBranchName']), 'merge')) }}:
  - template:    building-code/building-code.yml@CeBlueprints
    parameters:
      applicationType:        ${{parameters.applicationType}}
      portfolioName:          ${{parameters.portfolioName}}
      productName:            ${{parameters.productName}}
      cliSources:             ${{parameters.sourcesDirectory}}
      applicationBlueprint:   ${{parameters.applicationBlueprint}}
      blueprintVersion:       ${{parameters.blueprintVersion}}
      verbose:                ${{parameters.verbose}}
      modeElite:              ${{parameters.modeElite}}